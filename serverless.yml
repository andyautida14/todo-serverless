service: todo-serverless
useDotenv: true
variablesResolutionMode: 20210219

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-southeast-1
  stackName: ${self:service}-${self:custom.stage}
  apiGateway:
    shouldStartNameWithService: true
  lambdaHashingVersion: 20201221
  environment:
    DB_NAME: ${self:custom.dbName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !GetAtt DynamoDBTable.Arn
            - Fn::Join:
              - '/'
              - - !GetAtt DynamoDBTable.Arn
                - index
                - GSI1
        - Effect: Allow
          Action:
            - sns:publish
          Resource:
            - !Ref TodoCreatedTopic
            - !Ref TodoDoneTopic
            - !Ref TodoUndoneTopic

custom:
  stage: ${opt:stage, self:provider.stage, 'dev'}
  dbName: todo-${self:custom.stage}
  serverless-offline:
    noPrependStageInUrl: true
  dynamodb:
    stages:
      - dev
    start:
      dbPath: dynamodb-data
      migrate: true
  static:
    path: ./src/client
    port: 3001
  fullstack:
    domain: ${env:DOMAIN}
    certificate: ${env:CERTIFICATE}
    bucketName: ${self:provider.stackName}-frontend
    distributionFolder: src/client
    indexDocument: index.html
    singlePageApp: true
    priceClass: PriceClass_100
    noConfirm: true

plugins:
  - fullstack-serverless
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-iam-roles-per-function
  # comment-out the next line while deploying due to
  # https://github.com/iliasbhal/serverless-static/issues/3
  # - serverless-static

functions:
  getConfig:
    handler: src/api/functions/get-config.handler
    environment:
      STAGE: ${self:custom.stage}
      IDENTITY_POOL_ID: !Ref CognitoIdentityPool
      IOT_ENDPOINT_ADDRESS: !GetAtt IotEndpoint.IotEndpointAddress
      API_GATEWAY_URL:
        Fn::Join:
          - ''
          - - Ref: ApiGatewayRestApi
            - '.execute-api.${self:provider.region}.amazonaws.com'
    events:
      - http:
          method: get
          path: /api/config
  createTodo:
    handler: src/api/functions/create-todo.handler
    environment:
      TOPIC_TODO_CREATED_ARN: !Ref TodoCreatedTopic
    events:
      - http:
          method: post
          path: /api/todo
  getTodos:
    handler: src/api/functions/get-todos.handler
    events:
      - http:
          method: get
          path: /api/todo
  getDone:
    handler: src/api/functions/get-done.handler
    events:
      - http:
          method: get
          path: /api/done
  setToDone:
    handler: src/api/functions/set-to-done.handler
    environment:
      TOPIC_TODO_DONE_ARN: !Ref TodoDoneTopic
    events:
      - http:
          method: post
          path: /api/todo/{id}/done
  undone:
    handler: src/api/functions/undone.handler
    environment:
      TOPIC_TODO_UNDONE_ARN: !Ref TodoUndoneTopic
    events:
      - http:
          method: post
          path: /api/done/{id}/undone
  subscribe:
    handler: src/api/functions/subscribe.handler
    environment:
      STAGE: ${self:custom.stage}
    events:
      - http:
          method: post
          path: /api/subscribe
          authorizer: aws_iam
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - iot:AttachPrincipalPolicy
        Resource: '*'
  handleCreated:
    handler: src/api/functions/handle-created.handler
    environment:
      STAGE: ${self:custom.stage}
      IOT_ENDPOINT_ADDRESS: !GetAtt IotEndpoint.IotEndpointAddress
    events:
      - sns:
          arn: !Ref TodoCreatedTopic
          topicName: ${self:resources.Resources.TodoCreatedTopic.Properties.TopicName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - iot:Publish
        Resource:
          Fn::Join:
            - ''
            - - 'arn:aws:iot:'
              - ${self:provider.region}
              - ':'
              - !Ref AWS::AccountId
              - ':topic/'
              - ${self:custom.stage}/todo/*/created
  handleDone:
    handler: src/api/functions/handle-done.handler
    environment:
      STAGE: ${self:custom.stage}
      IOT_ENDPOINT_ADDRESS: !GetAtt IotEndpoint.IotEndpointAddress
    events:
      - sns:
          arn: !Ref TodoDoneTopic
          topicName: ${self:resources.Resources.TodoDoneTopic.Properties.TopicName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - iot:Publish
        Resource:
          Fn::Join:
            - ''
            - - 'arn:aws:iot:'
              - ${self:provider.region}
              - ':'
              - !Ref AWS::AccountId
              - ':topic/'
              - ${self:custom.stage}/todo/*/done
  handleUndone:
    handler: src/api/functions/handle-undone.handler
    environment:
      STAGE: ${self:custom.stage}
      IOT_ENDPOINT_ADDRESS: !GetAtt IotEndpoint.IotEndpointAddress
    events:
      - sns:
          arn: !Ref TodoUndoneTopic
          topicName: ${self:resources.Resources.TodoUndoneTopic.Properties.TopicName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - iot:Publish
        Resource:
          Fn::Join:
            - ''
            - - 'arn:aws:iot:'
              - ${self:provider.region}
              - ':'
              - !Ref AWS::AccountId
              - ':topic/'
              - ${self:custom.stage}/todo/*/undone
  iotEndpointProvider:
    handler: src/api/functions/iot-endpoint-provider.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - iot:DescribeEndpoint
        Resource: '*'

resources:
  Resources:
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dbName}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    TodoCreatedTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.stackName}-created-topic
    TodoDoneTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.stackName}-done-topic
    TodoUndoneTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.stackName}-undone-topic
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:provider.stackName}-identity-pool
        AllowUnauthenticatedIdentities: true
    UnauthenticatedRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Federated:
                  - cognito-identity.amazonaws.com
              Action:
                - sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: unauthenticated
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSIoTDataAccess
          - arn:aws:iam::aws:policy/AWSIoTConfigAccess
        Policies:
          - PolicyName: ${self:provider.stackName}-notif-subscribe-invoke-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - execute-api:Invoke
                  Resource:
                    - Fn::Join:
                      - ''
                      - - 'arn:aws:execute-api:'
                        - ${self:provider.region}
                        - ':'
                        - Ref: AWS::AccountId
                        - ':'
                        - Ref: ApiGatewayRestApi
                        - '/${self:custom.stage}/POST/api/subscribe'
    CognitoIdentityPoolRoleAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId: !Ref CognitoIdentityPool
        Roles:
          unauthenticated: !GetAtt UnauthenticatedRole.Arn
    IotEndpoint:
      Type: Custom::Endpoint
      Properties:
        ServiceToken: !GetAtt IotEndpointProviderLambdaFunction.Arn
    IotConnectPolicy:
      Type: AWS::IoT::Policy
      Properties:
        PolicyName: ${self:provider.stackName}-connect-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - iot:Connect
            Resource:
              - '*'
    IotSubscribePolicy:
      Type: AWS::IoT::Policy
      Properties:
        PolicyName: ${self:provider.stackName}-subscribe-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - iot:Subscribe
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:iot:'
                  - ${self:provider.region}
                  - ':'
                  - !Ref AWS::AccountId
                  - ':topicfilter/'
                  - ${self:custom.stage}/todo/*
    IotReceivePolicy:
      Type: AWS::IoT::Policy
      Properties:
        PolicyName: ${self:provider.stackName}-receive-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - iot:Receive
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:iot:'
                  - ${self:provider.region}
                  - ':'
                  - !Ref AWS::AccountId
                  - ':topic/'
                  - ${self:custom.stage}/todo/*

package:
  patterns:
    - '!.dynamodb/**'
    - '!dynamodb-data/**'
